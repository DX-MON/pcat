name: GitHub Actions

on:
  push:
    branches-ignore:
      - 'coverityScan'

jobs:
  build-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        compiler:
          - 'clang-6.0'
          - 'clang-7'
          - 'clang-8'
          - 'clang-9'
          - 'clang-10'
          - 'gcc-7'
          - 'gcc-8'
          - 'gcc-9'
          - 'gcc-10'
        coverage: [false, true]
      fail-fast: false
    steps:
      - name: Runtime environment
        shell: bash
        run: |
          echo ::set-env name=PATH::"$HOME/.local/bin:$PATH"
          echo ::set-env name=PKG_CONFIG_PATH::"$HOME/.local/lib/x86_64-linux-gnu/pkgconfig"
      - name: Coverage environment
        env:
          COVERAGE: ${{ matrix.coverage }}
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo ::set-env name=COVERAGE::$([ $COVERAGE == "true" ] && echo -n 1 || echo -n 0)
          echo ::set-env name=BUILD_OPTS::$([ $COVERAGE == "true" ] && \
            echo "--buildtype=debug -Db_lto=false" || echo "")
      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
          [ $COVERAGE -ne 0 ] && echo ::set-env name=GCOV::${CC/#gcc/gcov} || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          sudo apt-add-repository "deb https://apt.llvm.org/bionic/ llvm-toolchain-bionic${CC/#clang/} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo ::set-env name=CC::$CC
          echo ::set-env name=CXX::$CXX
          [ $COVERAGE -ne 0 ] && echo ::set-env name=GCOV::"/usr/lib/${CC/#clang/llvm}/bin/llvm-cov gcov" || true
        env:
          CC: ${{ matrix.compiler }}
      - name: Checkout pcat
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true
      - name: Checkout crunch
        uses: actions/checkout@v2
        with:
          repository: DX-MON/crunch
          path: crunch
          ref: v1.1.0
          lfs: true
          submodules: true
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-linux.zip
          sudo pip3 install --upgrade pip setuptools wheel
          pip3 install --user 'meson~=0.54.3'
          unzip ninja-linux.zip -d ~/.local/bin
          rm ninja-linux.zip
        working-directory: ${{ runner.temp }}
      - name: Version tools
        shell: bash
        run: |
          $CC --version
          $CXX --version
          [ $COVERAGE -ne 0 ] && $GCOV --version || true
          meson --version
          ninja --version
      - name: Install crunch
        shell: bash
        run: |
          meson build --prefix=$HOME/.local
          ninja -C build
          ninja -C build install
        working-directory: ${{ github.workspace }}/crunch
      - name: Configure
        run: meson build --prefix=$HOME/.local -Db_coverage=${{ matrix.coverage }} $BUILD_OPTS
      - name: Build
        run: ninja -C build
      - name: Test
        run: ninja -C build test
      - name: Install
        run: ninja -C build install
      - name: Codecov
        if: success() && matrix.coverage
        run: bash <(curl -s https://codecov.io/bash) -x "$GCOV";
        working-directory: ${{ github.workspace }}/build

  build-windows:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-2019]
        arch: ['amd64', 'x86']
        coverage: [false]
      fail-fast: false
    env:
      CC: cl.exe
      CXX: cl.exe
      LD: link.exe
    steps:
      - name: Checkout pcat
        uses: actions/checkout@v2
        with:
          lfs: true
          submodules: true
      - name: Runtime Environment
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %ARCH%
          call ${{ github.workspace }}/.github/exportEnv.bat
        env:
          ARCH: ${{ matrix.arch }}
      - name: Coverage environment
        shell: bash
        env:
          COVERAGE: ${{ matrix.coverage }}
        run: |
          echo "Coverage enabled for build? ${{ matrix.coverage }}"
          echo ::set-env name=COVERAGE::$([ $COVERAGE == "true" ] && echo -n 1 || echo -n 0)
          echo ::set-env name=BUILD_OPTS::${BUILD_OPTS}$([ $COVERAGE == "true" ] && \
            echo " --buildtype=debug -Db_lto=false" || echo "")
      - name: Setup Meson + Ninja
        shell: bash
        run: |
          curl -L1O https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip
          python -m pip install --upgrade pip setuptools wheel
          pip3 install meson
          unzip ninja-win.zip -d /c/windows/system32
          rm ninja-win.zip
        working-directory: ${{ runner.temp }}
      - name: Checkout crunch
        uses: actions/checkout@v2
        with:
          repository: DX-MON/crunch
          path: crunch
          ref: v1.1.0
          lfs: true
          submodules: true
      - name: Version tools
        shell: bash
        run: |
          rm /usr/bin/link.exe /c/msys64/usr/bin/link.exe
          $CC || true
          $LD || true
          meson --version
          ninja --version
      - name: Install crunch
        shell: bash
        run: |
          meson build --prefix=$HOME/.local
          ninja -C build
          ninja -C build install
        working-directory: ${{ github.workspace }}/crunch
      - name: Configure
        shell: bash
        env:
          MSYS2_ARG_CONV_EXCL: --pkg-config-path=
        run: |
          meson build --prefix=$HOME/.local -Db_coverage=${{ matrix.coverage }} $BUILD_OPTS \
            --pkg-config-path=$HOME/.local/lib/pkgconfig
      - name: Build
        shell: bash
        run: ninja -C build
      - name: Test
        shell: bash
        run: ninja -C build test
      - name: Codecov
        if: success() && matrix.coverage
        run: bash <(curl -s https://codecov.io/bash) -x "$GCOV";
